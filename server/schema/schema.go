//+build ignore

package main

import (
	"bytes"
	"fmt"
	"html/template"
	"os"

	"github.com/bmatcuk/doublestar"
)

func fatal(err error) {
	fmt.Fprintln(os.Stderr, "# Schema generation failed:")
	fmt.Fprintf(os.Stderr, "%v\n", err)
	os.Exit(1)
}

func main() {
	// Read all the GraphQL files into the schema string
	var buf bytes.Buffer
	files, err := doublestar.Glob("**/*.graphql")
	if err != nil {
		fatal(fmt.Errorf("read directory: %v", err))
	}
	for _, fpath := range files {
		gf, err := os.Open(fpath)
		if err != nil {
			fatal(fmt.Errorf("open %s: %v", fpath, err))
		}
		if _, err := buf.ReadFrom(gf); err != nil {
			fatal(fmt.Errorf("read %s: %v", fpath, err))
		}
		gf.Close()
	}

	f, err := os.OpenFile("schema_gen.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		fatal(fmt.Errorf("open schema_gen.go: %v", err))
	}
	defer f.Close()

	// Render the template to file
	schemaTemplate.Execute(f, struct{ Content string }{Content: buf.String()})
}

var schemaTemplate = template.Must(template.New("").Parse(`// Code generated by schema.go; DO NOT EDIT.
// This file collects all the *.graphql schema files into a go file for
// easier use during runtime.
package schema

// String returns the GraphQL schema as a string
func String() string {
	return ` + "`{{ .Content }}`" + `
}
`))
